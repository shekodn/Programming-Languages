#lang racket


(define (aux n x l)
    (cond ((< x n)
           (define lista(list x))
           (aux n (+ x 1) (append l lista)))
          ((= n x)
           (define lista(append l (list n)))
           (append lista (reverse lista)))
     )
  )
(define (palindromo n)
  (aux n 0 '())
  )

(define (auxParmenor menor lista)
  (if (null? lista) (display menor)
        (cond ((and (< (car lista) menor) (even? (car lista)))
               (auxParmenor (car lista) (cdr lista))
               )
              ((and (> (car lista) menor) (even? (car lista)))
               (auxParmenor menor (cdr lista))
               )
              ((odd? (car lista))
               (auxParmenor menor (cdr lista))
               )
        )
      )

)

(define (parmenor lista )

  (if (null? lista) (not (null? lista))
      (cond ((even? (car lista))
         (auxParmenor (car lista) (cdr lista))
         )
        ((odd? (car lista))
         (parmenor (cdr lista))
         )
      )
   )
)

(define (negativosAux lista lista2)
   (if (null? lista) (display lista2)
      (cond ((negative? (car lista))
             (negativosAux (cdr lista) (append lista2 (list (car lista))))
             )
             (else (negativosAux (cdr lista) lista2)
             )
      )

   )
 )

(define (negativos lista)
  (negativosAux lista '())
)
